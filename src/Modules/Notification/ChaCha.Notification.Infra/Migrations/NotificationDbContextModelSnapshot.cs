// <auto-generated />
using System;
using ChaCha.Notification.Infra.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChaCha.Notification.Infra.Migrations
{
    [DbContext(typeof(NotificationDbContext))]
    partial class NotificationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("notification")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChaCha.Notification.Domain.NotificationsSent.NotificationSent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("MessageId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("message_id");

                    b.Property<string>("MessageTemplateId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("message_template_id");

                    b.Property<string>("NotificationMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notification_method");

                    b.Property<string>("NotificationProvider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notification_provider");

                    b.Property<string>("Personalizations")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("personalizations");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_notifications_sent");

                    b.HasIndex("MessageId")
                        .IsUnique()
                        .HasDatabaseName("ix_notifications_sent_message_id");

                    b.ToTable("notifications_sent", "notification");
                });

            modelBuilder.Entity("ChaCha.Notification.Domain.TokenTypes.TokenType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("ExpirationTime")
                        .HasColumnType("integer")
                        .HasColumnName("expiration_time");

                    b.Property<int>("MaxAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("max_attempts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("ResentLimit")
                        .HasColumnType("integer")
                        .HasColumnName("resent_limit");

                    b.Property<int>("TokenLength")
                        .HasColumnType("integer")
                        .HasColumnName("token_length");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_token_types");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_token_types_name");

                    b.ToTable("token_types", "notification");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 24, 3, 14, 52, 982, DateTimeKind.Utc).AddTicks(3101),
                            Description = "Token used to multi factor authentication",
                            ExpirationTime = 5,
                            MaxAttempts = 5,
                            Name = "MFA",
                            ResentLimit = 5,
                            TokenLength = 6,
                            UpdatedAt = new DateTime(2025, 9, 24, 3, 14, 52, 982, DateTimeKind.Utc).AddTicks(4079)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 24, 3, 14, 52, 982, DateTimeKind.Utc).AddTicks(5204),
                            Description = "One Time Password token",
                            ExpirationTime = 5,
                            MaxAttempts = 5,
                            Name = "OTP",
                            ResentLimit = 5,
                            TokenLength = 9,
                            UpdatedAt = new DateTime(2025, 9, 24, 3, 14, 52, 982, DateTimeKind.Utc).AddTicks(5205)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 24, 3, 14, 52, 982, DateTimeKind.Utc).AddTicks(5207),
                            Description = "Recover account token",
                            ExpirationTime = 5,
                            MaxAttempts = 5,
                            Name = "RecoverAccount",
                            ResentLimit = 5,
                            TokenLength = 6,
                            UpdatedAt = new DateTime(2025, 9, 24, 3, 14, 52, 982, DateTimeKind.Utc).AddTicks(5207)
                        });
                });

            modelBuilder.Entity("ChaCha.Notification.Domain.TokensSent.TokenSent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Attempts")
                        .HasColumnType("integer")
                        .HasColumnName("attempts");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DataCheck")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data_check");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid>("NotificationSentId")
                        .HasColumnType("uuid")
                        .HasColumnName("notification_sent_id");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token");

                    b.Property<int>("TokenTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("token_type_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<bool>("Used")
                        .HasColumnType("boolean")
                        .HasColumnName("used");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("used_at");

                    b.HasKey("Id")
                        .HasName("pk_tokens_sent");

                    b.HasIndex("NotificationSentId")
                        .IsUnique()
                        .HasDatabaseName("ix_tokens_sent_notification_sent_id");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_tokens_sent_token");

                    b.HasIndex("TokenTypeId")
                        .HasDatabaseName("ix_tokens_sent_token_type_id");

                    b.ToTable("tokens_sent", "notification");
                });

            modelBuilder.Entity("ChaCha.Notification.Domain.TokensSent.TokenSent", b =>
                {
                    b.HasOne("ChaCha.Notification.Domain.NotificationsSent.NotificationSent", "NotificationSent")
                        .WithOne()
                        .HasForeignKey("ChaCha.Notification.Domain.TokensSent.TokenSent", "NotificationSentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tokens_sent_notifications_sent_notification_sent_id");

                    b.HasOne("ChaCha.Notification.Domain.TokenTypes.TokenType", "TokenType")
                        .WithMany()
                        .HasForeignKey("TokenTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tokens_sent_token_types_token_type_id");

                    b.Navigation("NotificationSent");

                    b.Navigation("TokenType");
                });
#pragma warning restore 612, 618
        }
    }
}
